'''
map_store = {
    wmsg : '/account.welcome_msg',
    login : '/account.login~',
    loggedin : '/account.loggedin',
    add_note: '~',
    cur_note: 'cur_note',
    notes: 'notes',
    last_note_id: 'last_note_id',
    download_notes: 'download_notes*',
    upload_notes: '*'
}
'''

from asset.rs_vue import V_collector,  RS_store, RS_state_api
from asset.common import asyncer
import asset.common as common

DEFSTATE = {
    fields: [
        {name: 'name', label: 'Name', width: '250px'},
        {name: 'type', label: 'Type', width: '50px'},
        {name: 'mtime', label: 'Last Changed', width: '200px',
             formatter: def(d): return d ? (new Date(d)).toLocaleString() : '';}
    ],
    dir_id : 0,
    selected : {},
    save_as : None,
    type_field : 'type',
    sort_by : 'name',
    toggle_refresh: False,
    basket: [],
}


vc = V_collector()
class State(RS_state_api):
    def __init__(self, vue, getter_factory, state):
        super(vc, vue, state or DEFSTATE)
        self.vm.rs_imports = {
            get_fs: getter_factory('get_fs')
        }

    @vc.mutation
    def save_as(self, save_as):
        self.state.save_as = save_as

    @vc.mutation
    def set_basket(self, basket):
        self.state.basket = basket

    @vc.mutation
    def set_dir(self, dir_id):
        self.state.dir_id = dir_id
        self.commit('clear_selected')

    @vc.getter
    def path_arr(vm):
        fs = vm.rs_imports.get_fs()()
        ret = fs.path_by_id(vm.state.dir_id).infos
        ret[0].name = 'root'
        return ret

    @vc.mutation
    def toggle_select(self, rid):
        selected = self.state.selected
        self.$set(selected, rid, not selected[rid])
        if not selected[rid]:
            self.$del(selected, rid)


    @vc.mutation
    def clear_selected(self):
        self.state.selected = {}

    @vc.mutation
    def fix_basket(self):
        #remove deleted files/dirs
        fs = self.vm.rs_imports.get_fs()()
        basket = self.state.basket
        b =  basket[1:].filter(def(it): return fs.files[it] or fs.dirs[it]; )
        if b.length != basket.length - 1:
            b.unshift(basket[0])
            self.commit('set_basket', b)

    @vc.getter
    def path(vm):
        return [it.name for it in vm.path_arr].join('/')

    @vc.getter
    def list_dir(vm):
        fs = vm.rs_imports.get_fs()()
        ret = []
        ids = fs.list_dir(vm.state.dir_id)
        for id in ids:
            ret.push(fs.get_info(id))
        return ret

    @vc.getter
    def row_actions(vm):
        def inner(r):
            ret = []
            if r.type == 'file':
                ret.push({
                     name:'row_download',
                     icon: { class: 'fa fa-download', style: 'color: gray'}
                })
                if r.name.endsWith('.html'):
                    ret.push({
                         name:'try_html',
                         icon: { class: 'fa fa-play', style: 'color: red; margin-left:5px;'}
                    })
            return ret
        return inner

class Store(RS_store):
    def __init__(self, root):
        self.root = root
        self.state_api = State(self.vue, root.getter_factory.bind(root))
        self.actions = vc._actions

    @vc.action
    def click_item(self, id):
        fs = self.root.api.fs
        if fs.dirs[id]:
            self.commit('set_dir', id)
        # maybe save_as mode
        elif (save_as = self.get('save_as')):
            save_as.name = fs.get_info(id).name
            self.commit('save_as', save_as)
        else:
            win_id = self.root.get('/editor.active_window')
            self.root.dispatch('/editor.open_by_id', id, win_id)
            self.root.commit('toggle_explorer', False)

    @vc.action
    def doit(self, a, payload):
        fs = self.root.api.fs
        cur_dir = self.get('dir_id')
        selected = self.get('selected')
        if a == 'row_download':
            if (fl = fs.files[payload]):
                common.download(fl.content, fl.name)
        elif a == 'upload':
            print('upload')
            def save_files(files):
                for f in files:
                    fid = fs.create_file(f.name, cur_dir)
                    fs.write_file(fid, f.value)
                self.root.$emit('fs_changed')
            common.upload_text().then(save_files)

        elif a == 'save_as':
            fid = fs.create_file(payload.name, cur_dir)
            fs.write_file(fid, payload.content)
            self.commit('save_as', None)
            adoc = self.root.get('/editor.active_doc_num')
            self.root.dispatch('/editor.open_by_id', fid, self.root.get('/editor.active_window'), adoc )
            self.root.$emit('fs_changed')
            self.root.commit('toggle_explorer', False)
        elif a == 'create':
            if not payload:
                return
            if payload.endsWith('/'):
                #fs.create_dir(payload[:-1], cur_dir)
                pass
            else:
                fs.create_file(payload, cur_dir, '')
            self.root.$emit('fs_changed')
        elif a == 'del':
            for id in selected:
                if selected[id]:
                    fs.del_any(id)
            self.commit('clear_selected')
            self.commit('fix_basket')
            self.root.$emit('fs_changed')
        elif a in ['cut', 'copy']:
            basket = [a]
            for id in selected:
                if selected[id]: basket.push(id);
            self.commit('set_basket', basket)
        elif a == 'paste':
            basket = self.get('basket')
            if basket[0] == 'copy':
                for id in basket[1:]:
                    fs.copy_any(id, cur_dir)
            elif basket[0] == 'cut':
                for id in basket[1:]:
                    fs.move(id, cur_dir)
            self.commit('set_basket', [])
            self.root.$emit('fs_changed')
        print(a, payload)

if __name__ == '__main__':
    pass
