import asset.fs_path as fs_path

class Module:
    @staticmethod
    def __init_class__(load_amd):
        this.prototype.load_amd = load_amd

    def __init__(self, def_args, path):
        self.loaded = False
        self.ok_err = None
        self.path = path or ''
        self.deps = []
        self.dep_mods = {}
        if Array.isArray(def_args[0]):
            self.deps = def_args.shift()
            self.dep_count = self.deps.length
        self.init = def_args[0]
        self.load_deps().then(self.run.bind(self))

    def on_load_script(self, ok_err):
        self.ok_err = ok_err
        if self.loaded:
            ok_err.ok(self.exports)

    def run(self, deps):
        for i, p in enumerate(self.deps):
            self.dep_mods[p] = deps[i]
        self.exports = self.init.apply(None, deps)
        self.loaded = True
        if self.ok_err:
            self.ok_err.ok(self.exports)

    def load_deps(self):
        p = []
        for mod_path in self.deps:
            p.push(self.load_amd(mod_path, self.path))
        return Promise.all(p)


def doc_ready(arg_to_pass):
    p = def(ok, err):
        document.addEventListener('readystatechange',def():
            if document.readyState == 'complete':
                ok(arg_to_pass);
        )
    if document.readyState == 'complete':
        return Promise.resolve(arg_to_pass)
    return Promise(p)

class RS_require:
    def __init__(self, cfg):
        self.cfg = cfg
        self.modules = {}
        self._modules = []
        define = window.define = def(req_list, mod):
            self.define(req_list, mod)
        define.amd =  {}
        self.fs_path = fs_path
        Module.__init_class__(self.load_amd.bind(self))

    def mount_module(self, as_name, mod):
        self.modules[as_name]  = {exports: mod, loaded: True, req_chain:[]}

    def define(self, req_list, cb):
        def make_mod(path):
            mod = Module([req_list, cb], path)
            self._modules.push(mod)
            return mod
        if (cs = document.currentScript) and cs.dataset.rs_req:
            self.make_mod = make_mod
        else:
            make_mod()

    def on_load_script(self, path, ok_err):
        # if no make_mode then suppose that it is not amd-script
        # - do nothing
        if self.make_mod:
            mod = self.make_mod(path)
            self.make_mod = None
            mod.on_load_script(ok_err)


    def on_error(self, name):
        console.log('error on load: ', name)

    def load_amd(self, name, requester):
        #print(f'${requester} -> ${name}')
        is_url = /https?:\/{2}.*/.test(name)
        src = name
        if not is_url:
            if name.startsWith('./'):
                name = name[2:]
            if requester:
                name = fs_path.rel_path_join(requester.split('/')[:-1].join('/'), name)
            js_root_dir = self.cfg and self.cfg.js_root_dir or ''
            src = fs_path.rel_path_join(js_root_dir, name)

        if (mod = self.modules[name]):
            if not mod.loaded:
                if mod.req_chain.find(def(it): return it is name;):
                    raise Error('Circular dependency: ' + name +  ' and ' + requester)
                mod.req_chain.push(requester)
            exp = mod.exports
            #print(f'${name}: already in process')
            return  isinstance(exp, Promise) ? exp :  Promise.resolve(exp)

        s = document.createElement('script')
        s.src = src + '.js'
        s.async = True
        s.onerror = def():
            self.on_error(name)
        s.dataset.rs_req = True
        ok_err = {}
        p = Promise(def(ok, err):
                nonlocal ok_err
                ok_err = {ok, err}
        )

        s.onload = def(): self.on_load_script(name, ok_err);
        document.head.appendChild(s) # run define
        p.then(def(exports):
            if (mod = self.modules[name]):
                mod.loaded = True
                mod.exports = exports
                #print(f'${name}: done!')
            else:
                raise Error('load_stack seems corrupted')
        )
        req_chain = requester ? [requester] : []
        self.modules[name] = {req_chain:req_chain, exports: p, loaded: False}
        return p

    def load_amd_list(self, mod_lst, requester):
        ret = []
        for mod in mod_lst:
            ret.push(self.load_amd(mod, requester))
        return Promise.all(ret)

    def get(self, name):
        mod = self.modules[name]
        if not mod:
            raise Error('Module `' + name + '` is not loaded')
        return self.modules[name].exports
